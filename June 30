class Solution {
public:
    Node* deleteNode(Node* head, int x) {
        // If linked list is empty or position is invalid
        if (head == nullptr || x <= 0) {
            return head;
        }

        Node* current = head;

        // If the node to be deleted is the head node
        if (x == 1) {
            head = current->next;
            if (head != nullptr) {
                head->prev = nullptr;
            }
            delete current;
            return head;
        }

        // Traverse the list to find the node to be deleted
        for (int i = 1; i < x && current != nullptr; i++) {
            current = current->next;
        }

        // If position is more than the number of nodes
        if (current == nullptr) {
            return head;
        }

        // If node to be deleted is not the last node
        if (current->next != nullptr) {
            current->next->prev = current->prev;
        }

        // If node to be deleted is not the first node
        if (current->prev != nullptr) {
            current->prev->next = current->next;
        }

        delete current;
        return head;
    }
};
